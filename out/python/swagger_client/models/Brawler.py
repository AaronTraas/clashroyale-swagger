# coding: utf-8

"""
    Brawl Stars API

    Unofficial Swagger definition for the official Brawl Stars API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Brawler(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'integer',
        'name': 'string',
        'power': 'integer',
        'rank': 'integer',
        'trophies': 'integer',
        'highest_trophies': 'integer',
        'star_powers': 'array',
        'gadgets': 'array'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'power': 'power',
        'rank': 'rank',
        'trophies': 'trophies',
        'highest_trophies': 'highesttrophies',
        'star_powers': 'starpowers',
        'gadgets': 'gadgets'
    }

    def __init__(self, id=None, name=None, power=None, rank=None, trophies=None, highest_trophies=None, star_powers=None, gadgets=None):  # noqa: E501
        """Brawler - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._power = None
        self._rank = None
        self._trophies = None
        self._highest_trophies = None
        self._star_powers = None
        self._gadgets = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if power is not None:
            self.power = power
        if rank is not None:
            self.rank = rank
        if trophies is not None:
            self.trophies = trophies
        if highest_trophies is not None:
            self.highest_trophies = highest_trophies
        if star_powers is not None:
            self.star_powers = star_powers
        if gadgets is not None:
            self.gadgets = gadgets

    @property
    def id(self):
        """Gets the id of this Brawler.  # noqa: E501


        :return: The id of this Brawler.  # noqa: E501
        :rtype: integer
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Brawler.


        :param id: The id of this Brawler.  # noqa: E501
        :type: integer
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Brawler.  # noqa: E501


        :return: The name of this Brawler.  # noqa: E501
        :rtype: string
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Brawler.


        :param name: The name of this Brawler.  # noqa: E501
        :type: string
        """

        self._name = name

    @property
    def power(self):
        """Gets the power of this Brawler.  # noqa: E501


        :return: The power of this Brawler.  # noqa: E501
        :rtype: integer
        """
        return self._power

    @power.setter
    def power(self, power):
        """Sets the power of this Brawler.


        :param power: The power of this Brawler.  # noqa: E501
        :type: integer
        """

        self._power = power

    @property
    def rank(self):
        """Gets the rank of this Brawler.  # noqa: E501


        :return: The rank of this Brawler.  # noqa: E501
        :rtype: integer
        """
        return self._rank

    @rank.setter
    def rank(self, rank):
        """Sets the rank of this Brawler.


        :param rank: The rank of this Brawler.  # noqa: E501
        :type: integer
        """

        self._rank = rank

    @property
    def trophies(self):
        """Gets the trophies of this Brawler.  # noqa: E501


        :return: The trophies of this Brawler.  # noqa: E501
        :rtype: integer
        """
        return self._trophies

    @trophies.setter
    def trophies(self, trophies):
        """Sets the trophies of this Brawler.


        :param trophies: The trophies of this Brawler.  # noqa: E501
        :type: integer
        """

        self._trophies = trophies

    @property
    def highest_trophies(self):
        """Gets the highest_trophies of this Brawler.  # noqa: E501


        :return: The highest_trophies of this Brawler.  # noqa: E501
        :rtype: integer
        """
        return self._highest_trophies

    @highest_trophies.setter
    def highest_trophies(self, highest_trophies):
        """Sets the highest_trophies of this Brawler.


        :param highest_trophies: The highest_trophies of this Brawler.  # noqa: E501
        :type: integer
        """

        self._highest_trophies = highest_trophies

    @property
    def star_powers(self):
        """Gets the star_powers of this Brawler.  # noqa: E501


        :return: The star_powers of this Brawler.  # noqa: E501
        :rtype: array
        """
        return self._star_powers

    @star_powers.setter
    def star_powers(self, star_powers):
        """Sets the star_powers of this Brawler.


        :param star_powers: The star_powers of this Brawler.  # noqa: E501
        :type: array
        """

        self._star_powers = star_powers

    @property
    def gadgets(self):
        """Gets the gadgets of this Brawler.  # noqa: E501


        :return: The gadgets of this Brawler.  # noqa: E501
        :rtype: array
        """
        return self._gadgets

    @gadgets.setter
    def gadgets(self, gadgets):
        """Sets the gadgets of this Brawler.


        :param gadgets: The gadgets of this Brawler.  # noqa: E501
        :type: array
        """

        self._gadgets = gadgets

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Brawler):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
